enabled: true
id: "portfolio"

content:
  - image: "images/vc.jpg"
    pretitle: "You can learn Embedded Systems by following"
    title: "The Five Essential ingredients"
    text: "Any Embedded System Development will have at least three of - CPU, C/Assembly, Operating Systems, FPGAs and Build Tools! All one has to do is - know a little bit of each of these topics to be useful on a team. The mastery of each of these topics will come naturally with time."

    buttons:
      - label: "See live"
        url: "#"

      - label: "Read more"
        url: "#"

  - image: "images/c.jpg"
    pretitle: "And remember, lower level code is commonly written in"
    title: "C and Assembly! "
    text: "These are the work horses of the Embedded Software Design. The boot code, hardware initialisation and certain CPU specific features can only be controlled by writing functions in the assembly language. The higher level more portable system code is written primarily in the C language. This is again because C is very close to the hardware and developers can predict the assembly that will be generated by compiling the C code..."

    buttons:
      - label: "See live"
        url: "#"

      - label: "Read more"
        url: "#"

  - image: "images/cpu.jpg"
    pretitle: "At the heart of every Embedded System is one or more"
    title: "CPUs"
    text: "In modern day systems, CPUs are used to drive the decision and shift the system from one state to another. Take an example of Washing Machine. Monitoring what program the user has selected, driving different parts of the machine (drum, pump, heater etc) to execute the selected program, etc is done by one or many CPUs. Almost always, there will be a CPU that needs to be programmed as part of an Embedded systems based solution. Learning how CPUs work (the generic theory) is extremely helpful and allows one to reason deeply about how the system works..."

    buttons:
      - label: "See live"
        url: "#"

      - label: "Read more"
        url: "#"

  - image: "images/os.jpg"
    pretitle: "And as the hardware becomes more complex, the management is abstracted using"
    title: "Operating Systems!"
    text: "How can we get one CPU to execute code for multiple tasks in a round robin fashion? The answer is - Using a Scheduler. Such a layer of software that manages tasks and then by extension the hardware is referred to as the Operating System."

    buttons:
      - label: "See live"
        url: "#"

      - label: "Read more"
        url: "#"

  - image: "images/fpga.jpg"
    pretitle: "To understand hardware better, have some experience programming"
    title: "The FPGAs!"
    text: "Field-Programmable Gate Arrays (FPGAs) play a unique role in embedded systems development by providing a flexible and reconfigurable platform for implementing custom digital logic. Imagine, what happens when hardware is being developed, what will the software engineers be doing? They will typically be using some sort of emulator or FPGAs to deploy the RTL (hardware design) on it and develop the software in parallel and make it ready by the time the Silicon (actual) chip arrives. Having an idea about how the hardware design flow works and trying/deploying circuits on FPGAs go a long way in terms of reasoning about how the CPUs and Peripherals might be working."

    buttons:
      - label: "See live"
        url: "#"

      - label: "Read more"
        url: "#"

  - image: "images/build.jpg"
    pretitle: "Become the reliable engineer by mastering"
    title: "Build Tools"
    text: "Build tools are the utilities help automate and convert the code to the binary the CPUs/FPGAs can understand. Not only this but tools/utilities also help us debug, automate, convert etc the solutions we develop. These tools typically involve - compiler toolchain, make, shell scripting, gdb etc and are an absolute 'must know' for an embedded software engineer."

    buttons:
      - label: "See live"
        url: "#"

      - label: "Read more"
        url: "#"
